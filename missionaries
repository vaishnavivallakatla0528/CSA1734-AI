from collections import deque

# Define the initial state
initial_state = (3, 3, 1)  # (Missionaries, Cannibals, Boat position)
goal_state = (0, 0, 0)  # (Missionaries, Cannibals, Boat position)

# Define the possible moves
moves = [
    (1, 0),  # One missionary crosses
    (2, 0),  # Two missionaries cross
    (0, 1),  # One cannibal crosses
    (0, 2),  # Two cannibals cross
    (1, 1)   # One missionary and one cannibal cross
]

# Check if a state is valid
def is_valid(state):
    m, c, _ = state
    if m < 0 or m > 3 or c < 0 or c > 3:
        return False
    if m > 0 and m < c:
        return False
    if m < 3 and (3 - m) < (3 - c):
        return False
    return True

# Generate the next possible states
def get_next_states(state):
    m, c, b = state
    next_states = []
    if b == 1:  # Boat on the original side
        for move in moves:
            new_state = (m - move[0], c - move[1], 0)
            if is_valid(new_state):
                next_states.append(new_state)
    else:  # Boat on the other side
        for move in moves:
            new_state = (m + move[0], c + move[1], 1)
            if is_valid(new_state):
                next_states.append(new_state)
    return next_states

# Perform BFS to find the solution
def bfs(initial_state, goal_state):
    queue = deque([(initial_state, [])])
    visited = set()
    while queue:
        current_state, path = queue.popleft()
        if current_state in visited:
            continue
        visited.add(current_state)
        if current_state == goal_state:
            return path + [current_state]
        for next_state in get_next_states(current_state):
            queue.append((next_state, path + [current_state]))
    return None

# Find the solution
solution = bfs(initial_state, goal_state)
if solution:
    print("Solution found:")
    for step in solution:
        print(step)
else:
    print("No solution found.")
